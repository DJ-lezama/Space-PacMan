using System.Collections.Generic;

namespace PacMan
{
    public class Map
    {
        public char[,] level = new char[,] { };
        public Pacman pacman;
        private Canvas canvas;
        public int Score { get; set; } = 0;
        
        public Map()
        {
            level = new char[,] {
            {'0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'},
            {'0','2','K','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','P','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','R','2','0'},
            {'0','0','1','0','0','1','0','0','0','1','0','1','0','1','0','0','0','0','0','0','0','1','0','0','0','0','0','0','0','0','1','0','1','0','1','0','0','0','1','0','0','1','0','0'},
            {'0','0','1','0','0','1','0','0','0','1','0','1','0','1','0','0','1','1','1','0','1','1','1','1','0','1','1','1','0','0','1','0','1','0','1','0','0','0','1','0','0','1','0','0'},
            {'0','0','1','1','1','1','0','1','1','1','1','1','0','1','0','0','1','0','1','1','1','0','0','1','1','1','0','1','0','0','1','0','1','1','1','1','1','0','1','1','1','1','0','0'},
            {'0','0','1','0','1','0','0','1','0','0','0','0','0','1','1','1','1','0','1','0','0','0','0','0','0','1','0','1','1','1','1','0','0','0','0','0','1','0','0','1','0','1','0','0'},
            {'0','0','1','0','1','0','0','1','1','1','1','1','1','1','0','0','1','0','1','1','1','1','1','1','1','1','0','1','0','0','1','1','1','1','1','1','1','0','0','1','0','1','0','0'},
            {'0','0','1','0','1','0','0','1','0','1','0','0','0','0','0','0','1','0','0','0','0','0','0','0','0','0','0','1','0','0','0','0','0','0','1','0','1','0','0','1','0','1','0','0'},
            {'0','0','1','0','1','0','0','1','0','1','0','1','1','1','1','0','1','0','0','0','0','0','0','0','0','0','0','1','0','1','1','1','1','0','1','0','1','0','0','1','0','1','0','0'},
            {'0','0','1','0','1','1','1','1','1','1','1','1','0','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','0','0','1','1','1','1','1','1','1','1','0','1','0','0'},
            {'0','0','1','0','0','0','1','0','0','1','0','1','0','0','1','0','1','0','0','0','0',' ',' ','0','0','0','0','1','0','1','0','0','1','0','1','0','0','1','0','0','0','1','0','0'},
            {'0','0','1','0','0','0','1','0','0','1','0','1','0','0','1','0','1','0','A',' ',' ',' ',' ',' ',' ','C','0','1','0','1','0','0','1','0','1','0','0','1','0','0','0','1','0','0'},
            {'1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','0','1','0',' ',' ',' ',' ',' ',' ',' ',' ','0','1','0','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1'},
            {'0','0','1','1','1','1','0','0','0','0','1','0','0','0','1','0','1','0','B',' ',' ',' ',' ',' ',' ','D','0','1','0','1','0','0','0','1','0','0','0','0','1','1','1','1','0','0'},
            {'0','0','1','0','0','1','0','0','0','0','1','0','0','0','1','0','1','0','0','0','0','0','0','0','0','0','0','1','0','1','0','0','0','1','0','0','0','0','1','0','0','1','0','0'},
            {'0','0','1','0','0','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','0','0','1','0','0'}, 
            {'0','0','1','0','0','1','1','1','1','0','0','0','0','0','0','0','1','0','0','0','0','0','0','0','0','0','0','1','0','0','0','0','0','0','0','1','1','1','1','0','0','1','0','0'},
            {'0','0','1','1','1','1','0','0','1','1','1','0','0','0','0','0','1','0','0','0','0','0','0','0','0','0','0','1','0','0','0','0','0','1','1','1','0','0','1','1','1','1','0','0'}, 
            {'0','0','1','0','0','1','0','0','0','0','1','0','0','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0','1','0','0','0','0','1','0','0','1','0','0'},
            {'0','0','1','0','0','1','0','0','0','0','1','1','1','1','0','1','0','0','1','0','0','0','0','0','0','1','0','0','1','0','1','1','1','1','0','0','0','0','1','0','0','1','0','0'},
            {'0','0','1','1','1','1','1','1','1','1','1','0','0','1','0','1','1','1','1','1','1','0','0','1','1','1','1','1','1','0','1','0','0','1','1','1','1','1','1','1','1','1','0','0'},
            {'0','0','1','0','0','0','0','0','0','0','1','1','1','1','0','0','0','0','0','0','1','0','0','1','0','0','0','0','0','0','1','1','1','1','0','0','0','0','0','0','0','1','0','0'},
            {'0','0','1','0','0','0','0','0','0','0','1','0','0','1','0','0','0','0','0','0','1','1','1','1','0','0','0','0','0','0','1','0','0','1','0','0','0','0','0','0','0','1','0','0'},
            {'0','2','O','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','I','2','0'},
            {'0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'},
            };

        }

        public void SetPacman(Pacman pacman)
        {
            this.pacman = pacman;
        }

        public void SetCanvas(Canvas canvas)
        {
            this.canvas = canvas;
        }

        // Checks if the specified position is passable (not a wall).
        public bool IsPassable(int x, int y)
        {
            // Check bounds first to avoid index out of range errors.
            if (x < 0 || x >= level.GetLength(1) || y < 0 || y >= level.GetLength(0))
            {
                return false; // Position out of bounds is considered impassable.
            }

            return level[y, x] != '0'; // '0' represents a wall, which is not passable.
        }

        public void EatPillOrPellet(int pacmanX, int pacmanY, Pacman pacman)
        {
            if (level[pacmanY, pacmanX] == '1') // Normal pill
            {
                Score += 10; // Increase score by 10 for normal pill.
                level[pacmanY, pacmanX] = ' '; // Remove the pill from the map.
            }
            else if (level[pacmanY, pacmanX] == '2') // Power pellet
            {
                Score += 50; // Increase score by 50 for power pellet.
                level[pacmanY, pacmanX] = ' '; // Remove the power pellet from the map.
                pacman.poweredUp = true;
                
            }
        }

        public void GhostCollisions(Pacman pacman, List<Ghost> ghosts)
        {
            foreach (Ghost ghost in ghosts)
            {
                if (pacman.X == ghost.x && pacman.Y == ghost.y)
                {
                    if (pacman.poweredUp)
                    {
                        ghost.HandleBeingEaten();
                        Score += 200;
                    }
                    else
                    {
                        pacman.HandleBeingEaten();
                        if (pacman.lives > 0)
                        {
                            pacman.isAlive = true;
                            canvas.RespawnPacman();
                        }
                        
                    }
                }
            }
        }
        
        public int CountPillsLeft()
        {
            int pillCount = 0; // Initialize a counter for the pills
            for (int y = 0; y < level.GetLength(0); y++)
            {
                for (int x = 0; x < level.GetLength(1); x++)
                {
                    if (level[y, x] == '1') // Check only for pills, not pellets
                    {
                        pillCount++; // Increment the counter for each pill found
                    }
                }
            }
            return pillCount; // Return the total count of pills left
        }
        
        public bool ArePillsOrPelletsLeft()
        {
            for (int y = 0; y < level.GetLength(0); y++)
            {
                for (int x = 0; x < level.GetLength(1); x++)
                {
                    if (level[y, x] == '1' || level[y, x] == '2')
                    {
                        return true; // Pills or pellets are still left
                    }
                }
            }
            return false; // No pills or pellets left
        }

        public (int, int) SearchTarget(char target)
        {
            for (int y = 0; y < level.GetLength(0); y++)
            {
                for (int x = 0; x < level.GetLength(1); x++)
                {
                    if (level[y, x] == target)
                    {
                        return (x, y);
                    }
                }
            }

            return (-1, -1);
        }
        
    }

}
